<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>James McNeil</title>
    <link>https://jamesmcneil.dev/</link>
    <description>Recent content on James McNeil</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-uk</language>
    <lastBuildDate>Sun, 10 May 2020 07:16:17 +0000</lastBuildDate>
    
	<atom:link href="https://jamesmcneil.dev/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Study Guide to Confusingly Named Consistency Guarantees</title>
      <link>https://jamesmcneil.dev/posts/consistency-guarantees/</link>
      <pubDate>Sun, 10 May 2020 07:16:17 +0000</pubDate>
      
      <guid>https://jamesmcneil.dev/posts/consistency-guarantees/</guid>
      <description>There are a huge number of terms used when describing consistency guarantees in distributed systems. What&amp;rsquo;s the difference between serializable and linearizable? What&amp;rsquo;s a &amp;lsquo;dirty read&amp;rsquo;? How do these concepts map between SQL and NoSQL databases? What, in other words, is Kyle Kingsbury actually talking about? I personally find the concepts very confusing. For one thing, everyone uses slightly different terminology for similar or adjacent concepts. Martin Kleppmann helpfully points out that it&amp;rsquo;s not just me.</description>
    </item>
    
    <item>
      <title>Always close the response body! Running out of file descriptors in Golang</title>
      <link>https://jamesmcneil.dev/posts/golang-response-body/</link>
      <pubDate>Mon, 30 Dec 2019 08:52:00 +0000</pubDate>
      
      <guid>https://jamesmcneil.dev/posts/golang-response-body/</guid>
      <description>In Go you cannot just fire and forget a function. Failing to handle the return types could lead your program to fail. It is quite easy, for instance, to leak file descriptors. This is very, very bad for long-running or high throughput processes. Check for leaks.</description>
    </item>
    
  </channel>
</rss>